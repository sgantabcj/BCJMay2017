package com.crmindz.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.crmindz.model.LoginDetails;
import com.crmindz.service.LoginService;

/**
 * Acts as controller and contains all the handlers related to login functionality.
 * 
 * @author Sravan Ganta
 */
@Controller
public class LoginController {

	@Autowired
	LoginService loginService;
	
	
	final static Logger logger = Logger.getLogger(LoginController.class);
	
	/**
	 * Returns the login view along with LoginDetails model attribute.
	 * 
	 * @param allRequestParams contains all the parameters passed as part of the GET request.
	 * @return	               returns model object with login view,
	 * 			               login object as model attribute and respective 
	 * 			               message to display on the login page.
	 */
	@RequestMapping(value="/login", method = RequestMethod.GET)
	public ModelAndView showLogin(@RequestParam Map<String,String> allRequestParams){
		
		ModelAndView modelAndView = new ModelAndView("login");
		modelAndView.addObject("loginAttr",new LoginDetails());
		
		if(allRequestParams.containsKey("message")){
			modelAndView.addObject("message",allRequestParams.get("message"));
		}
		
		return modelAndView;
	}
	
	
	/**
	 * Processes the login by validating user credentials.
	 * Returns the login view again on login failure with appropriate message.
	 * Returns the welcome view on login success.
	 * 
	 * @param request	the request object for accessing the session object
	 * 					to set attributes like userId and userType for later
	 * 					use in the application.
	 * @param login		login object with the user name and password parameter
	 * 					values from the login page.
	 * @return			returns the model object with welcome page or login page,
	 * 					with message attribute.
	 */
	@RequestMapping(value="/loginPorcess", method = RequestMethod.POST)
	public ModelAndView loginProcess(HttpServletRequest request,@ModelAttribute("loginAttr") LoginDetails login){
		
		logger.info("Inside the login process");
		
		
		Map<String,Object> userDetails = loginService.validateUserLogin(login);
		
		if(userDetails == null){
			
			logger.info("Incorrect credentials msg");
			return new ModelAndView("redirect:/login?message=Incorrect credentials, please try again");
			
		}else{
						
			logger.info("Correct credentials msg");
			
			//Accessing existing session if exists or create a new one
			HttpSession session = request.getSession(true);
			
			session.setAttribute("userName", login.getUsername());
			session.setAttribute("userId", userDetails.get("userId").toString());
			session.setAttribute("userType", userDetails.get("usertype").toString());
			
			ModelAndView modelAndView = new ModelAndView("welcome");
			modelAndView.addObject("firstname",(String)userDetails.get("firstname"));
			
			logger.info("Returning the model");
			
			return modelAndView;
		}
	}
	
	
	/**
	 * Returns the login view with logged out message.
	 * 
	 * @param request	the request object for accessing the session object
	 * 					to invalidate it.
	 * @return	returns the model object with login view and message parameter.
	 */
	@RequestMapping(value="/logout", method=RequestMethod.GET)
	public ModelAndView Logout(HttpServletRequest request){
		
		HttpSession session = request.getSession(true);
		session.invalidate();
		
		return new ModelAndView("redirect:/login?message=You have been successfully logged out!");
		
	}
}
