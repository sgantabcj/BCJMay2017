package com.crmindz.bcjmay2017.datatypes.strings.lab1;

//demonstrates the string methods like length, substring, replaceAll
public class StringMethodsDemo {
	public static void main(String[] args) {
		String s = "hello how are you? hello again";

		int wordCount = getWordCount(s);
		System.out.println("Word count of " + s + " is: " + wordCount);

		System.out.println("length of " + s + " is: " + s.length());

		// replaced all the "hello" words with "HELLO"
		String replacedString = getReplacedString(s, "hello", "HELLO");
		System.out.println("Stirng after replaced \"hello\" with \"HELLO\" is: " + replacedString);

		// replaced all spaces with ','
		String replacedString1 = getReplacedString(s, " ", ",");
		System.out.println("Stirng after replaced \"whitespace\" with comma is: " + replacedString1);

		// finding the first 3 characters of a string
		String substring = getSubstring(s, 0, 3);
		System.out.println("first 3 characters of \"" + s + "\" are: " + substring);

		// comparing two strings for equality
		String testMsg = testEquality("hello", "HELLO");
		System.out.println("\"hello\" and \"HELLO\" are: " + testMsg);

		// checking if string is a palindrome
		String palindromeStr = "NITIN";
		System.out.println("Is \"NITIN\" equal from both sides? :" + testForPalindrome(palindromeStr));

//		checking all the occurrences of a character in string
		String s1 = "HELLO HOW ARE YOU AND WHERE ARE YOU";
		String occuranceIndicesArray = getAllOccurances(s1,"A");
		
	}

	// returns the word count of a string passed
	static int getWordCount(String s) {
		String[] sArray = s.split("\\s+");
		return sArray.length;
	}

	// returns the string with replaced substrings
	static String getReplacedString(String s, String s1, String s2) {
		return s.replaceAll(s1, s2);
	}

	// returns substring when supplied with string, starting and ending indices
	static String getSubstring(String s, int beginIndex, int endIndex) {
		return s.substring(beginIndex, endIndex);
	}

	// testing two strings for equality
	static String testEquality(String s1, String s2) {
		return s1.equals(s2) ? "equal" : "notEqual";
	}

	// testing two strings for equality
	static String testForPalindrome(String s) {
		// storing all the characters of the string in an array
		char[] palindromeArray = new char[s.length()];
		s.getChars(0, s.length(), palindromeArray, 0);

		// reversing the character array
		char temp;
		for (int i = 0; i < palindromeArray.length / 2; i++) {
			temp = palindromeArray[i];
			palindromeArray[i] = palindromeArray[palindromeArray.length - 1 - i];
			palindromeArray[palindromeArray.length - 1 - i] = temp;
		}

		// testing for equality of the original and reversed strings
		if (testEquality(s, new String(palindromeArray)) == "equal") {
			return "palindrome";
		} else {
			return "not a plindrome";
		}
	}
	
//	returning an array of indices for all the occurence of a string or char in another string
	static String getAllOccurances(String s, String substring) {
		String occurenceIndicesStr = "";
		int currentIndex = 0,count = 0;
		while(currentIndex<s.lastIndexOf(substring)){
			currentIndex = s.indexOf(substring,currentIndex+1);
			occurenceIndicesStr+=currentIndex+" ";
			count++;
		}
		System.out.println("count:"+count+" string with indices of occurences: "+occurenceIndicesStr);
		return occurenceIndicesStr;
//		String[] occurenceIndicesArray = new String[count];
//		occurenceIndicesArray = occurenceIndicesStr.split(" ");
//		return occurenceIndicesArray;
	}
}
