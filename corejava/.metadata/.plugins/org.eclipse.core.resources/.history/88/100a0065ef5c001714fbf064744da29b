package com.crmindz.bcjmay2017.datatypes.strings.lab1;

//demonstrates the string methods like length, substring, replaceAll
public class StringMethodsDemo {
	public static void main(String[] args) {
		String s = "hello how are you? hello again";

		int wordCount = getWordCount(s);
		System.out.println("Word count of " + s + " is: " + wordCount);

		System.out.println("length of " + s + " is: " + s.length());

		// replaced all the "hello" words with "HELLO"
		String replacedString = getReplacedString(s, "hello", "HELLO");
		System.out.println("Stirng after replaced \"hello\" with \"HELLO\" is: " + replacedString);

		// replaced all spaces with ','
		String replacedString1 = getReplacedString(s, " ", ",");
		System.out.println("Stirng after replaced \"whitespace\" with comma is: " + replacedString1);

		// finding the first 3 characters of a string
		String substring = getSubstring(s, 0, 3);
		System.out.println("first 3 characters of \"" + s + "\" are: " + substring);
		
//		comparing two strings for equality
		String testMsg = testEquality("hello","HELLO");
		System.out.println("\"hello\" and \"HELLO\" are: "+testMsg);
		
//		checking if string is a palindrome
		String palindromeStr = "NITHIN";
		System.out.println("Is \"NITIN\" equal from both sides? :"+ testForPalindrome(palindromeStr));
		
	}

	// returns the word count of a string passed
	static int getWordCount(String s) {
		String[] sArray = s.split("\\s+");
		return sArray.length;
	}

	// returns the string with replaced substrings
	static String getReplacedString(String s, String s1, String s2) {
		return s.replaceAll(s1, s2);
	}

	// returns substring when supplied with string, starting and ending indices
	static String getSubstring(String s, int beginIndex, int endIndex) {
		return s.substring(beginIndex, endIndex);
	}
	
//	testing two strings for equality
	static String testEquality(String s1,String s2){
		return s1.equals(s2)? "equal" : "notEqual";
	}
	
//	testing two strings for equality
	static String testForPalindrome(String s){
		char[] palindromeArray = new char[s.length()];
		s.getChars(0, s.length(), palindromeArray, 0);
		
		char temp;
		for (int i = 0; i < palindromeArray.length / 2; i++) {
			temp = palindromeArray[i];
			palindromeArray[i] = palindromeArray[palindromeArray.length - 1 - i];
			palindromeArray[palindromeArray.length - 1 - i] = temp;
		}
		
		if(testEquality(s, new String(palindromeArray))=="equal"){
			return "palindrome";
		}else{
			return "not a plindrome";
		}
	}
}
