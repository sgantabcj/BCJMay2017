package com.bcj.sampleproject.test;

public class Test {
	public static void main(String[] args) {
		/*
		 * String s = "how are  you?    h   "; char[] charArray = { 'h', 'e',
		 * 'l', 'l', 'o' }; System.out.println("s is " + s);
		 * 
		 * String s1 = new String(charArray); System.out.println("s1 is " + s1);
		 * 
		 * String s2 = String.valueOf(charArray); System.out.println("s2 is " +
		 * s2); // [\\w*][@{1}][\\w*][.{1}][\\w] //
		 * ^([a-zA-Z0-9_-\\.]+)@([a-zA-Z0-9_-\\.]+)\\.([a-zA-Z]{2,5})$ ; //
		 * first way of using regex using pattern and matcher classes // using
		 * compile method of pattern // using matcher and matches methods of
		 * matcher class Pattern p = Pattern .compile(
		 * "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$"
		 * ); Matcher m = p.matcher("ganta.sra_12-vankumar@gmail.com"); boolean
		 * b = m.matches(); if (b) { System.out.println("matched"); } else {
		 * System.out.println("not matched"); }
		 * 
		 * // second way of using regex using pattern class String result =
		 * Pattern.matches("[a-z]", "sravan") ? "matched" : "not-matched";
		 * System.out.println(result);
		 * 
		 * // using pattern class compile method and split methods // can also
		 * be done using split method directly // String[] sArray =
		 * s.split("\\s+"); Pattern whiteSpacePattern = Pattern.compile("\\s+");
		 * String[] sArray =
		 * whiteSpacePattern.split("how are  you?   f d    h"); System.out.
		 * println("words in \"how are you?\" found using regex, patternclassare :"
		 * + sArray.length);
		 * 
		 * // only by using split method finding the number of words in a line
		 * String[] words = s.split(" "); System.out.
		 * println("words in \"how are you?\" found using split method are: " +
		 * words.length);
		 * 
		 * // using getChars method to split individual characters of a string
		 * and // forming an array String palindromeString = "NITHIN"; char[]
		 * palindromeArray = new char[palindromeString.length()];
		 * palindromeString.getChars(0, palindromeString.length(),
		 * palindromeArray, 0);
		 * System.out.println("NITIN array using getChars method:" +
		 * Arrays.toString(palindromeArray));
		 * 
		 * // Reversing an array char temp; for (int i = 0; i <
		 * palindromeArray.length / 2; i++) { temp = palindromeArray[i];
		 * palindromeArray[i] = palindromeArray[palindromeArray.length - 1 - i];
		 * palindromeArray[palindromeArray.length - 1 - i] = temp; }
		 * System.out.println("Reversed character string is: " +
		 * Arrays.toString(palindromeArray));
		 * 
		 * String myString = "Hi my name is sravan";
		 * reverseEachWordOfString(myString); System.out.println(myString);
		 */

		





		

		
		  String s = "sandeep",temp=""; for(int i=0;i<s.length();i++){ 
			  char c =s.charAt(i); 
			  for(int j=s.indexOf(c);j<s.length();j++){
		  
			  } 
		}
		 
		
	}


	 
}
